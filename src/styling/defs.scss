/* Copyright (c) Fortanix, Inc.
|* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of
|* the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/. */

@use 'sass:math';

@forward './variables.scss';
@forward './global/fonts.scss' hide styles;
@forward './global/accessibility.scss' hide styles;
@forward './context/theming.scss' hide styles;

@use './variables.scss' as vars;

@mixin component-base($name) {
  container-name: $name;
  /* Enable content containment. This enforces that the component's content is isolated from its parents. */
  /* https://css-tricks.com/lets-take-a-deep-dive-into-the-css-contain-property */
  contain: layout style;
  
  // The following both disallow anything painted outside of the element boundaries, except from things like outlines
  // or `border-image` on the outer element. However, enabling these by default is not a good idea, because it may cut
  // off things like focus outlines on child elements. We cannot guaranteed that there there is a padding on every `.bk`
  // element to prevent this kind of thing.
  //overflow: hidden;
  //contain: paint;
}

@mixin font($family: vars.$font-family-display, $weight: vars.$font-weight-regular, $size: null) {
  font-family: $family;
  font-weight: $weight;
  @if $size {
    font-size: $size;
  }
}

@mixin text-layout {
  /* https://blog.logrocket.com/guide-css-word-wrap-overflow-wrap-word-break/ */
  /* https://stackoverflow.com/questions/12699800/smarter-word-break-in-css */
  overflow-wrap: break-word; /* Prevent long words causing overflow */
  text-wrap: pretty; /* Favor better typography for text wrapping (e.g. prevent orphans */
  hyphens: auto;
}

@mixin text-one-line {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

@mixin flex-center() {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin rounded($rounding: bkl.$sizing-xs) {
  border-radius: $rounding;
  overflow: hidden; // Prevent child items from "bleeding through" the rounded borders
}

@function rem-from-px($size-in-px) {
  @return math.div($size-in-px, 14) * 1rem;
}
